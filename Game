



import shiffman.box2d.*;
import org.jbox2d.common.*;
import org.jbox2d.dynamics.joints.*;
import org.jbox2d.collision.shapes.*;
import org.jbox2d.collision.shapes.Shape;
import org.jbox2d.common.*;
import org.jbox2d.dynamics.*;
import org.jbox2d.dynamics.contacts.*;
//Background
PImage background;
PImage Halcon;
PImage start_background;
boolean state=false;

// A reference to our box2d world
Box2DProcessing box2d;

// Just a single box this time
Box box;

// An ArrayList of particles that will fall on the surface
ArrayList<Particle> particles;

// The Spring that will attach to the box from the mouse
Spring spring;
Texture texture;

// Perlin noise values
float xoff = 0;
float yoff = 1000;
int screen=0;
int score=0;

void setup() {
  size(962,562);
  smooth();
  background  = loadImage("fondopelea.jpg");
  start_background = loadImage("starwarsinicio.jpg");
  Halcon  = loadImage("HalconMilenario.png");
  // Initialize box2d physics and create the world
  box2d = new Box2DProcessing(this);
  box2d.createWorld();
box2d.setGravity(0,-10);
  // Turn on collision listening!
  box2d.listenForCollisions();

  // Make the box
  box = new Box(width/2,height/2);

  // Make the spring (it doesn't really get initialized until the mouse is clicked)
  //texture = new Texture(Gdx.files.internal("data/ball.png")
  spring = new Spring();
  spring.bind(width/2,height/2,box);

  // Create the empty list
  particles = new ArrayList<Particle>();


}
void draw(){
  switch(screen){
    case 0:
      background(start_background);
      if(mousePressed)
        screen++;
      break;
    case 1:
      game();
      if(state)
        screen++;
      break;
    case 2:
        background(255,255,255);
        fill(0,0,0);
        text("Final Score: ",(width/2)-140,height/2);
        text(score,(width/2)+85,height/2);
      break;
      
  }
}
void game() {  
  background(background);
  fill(255,255,255);
  textSize(40);
  text("Score: ",30,50);
  text(score,150,50);
  image(Halcon, mouseX-25, mouseY-25,60,60);
   spring.update(mouseX,mouseY);
  box.body.setAngularVelocity(0);
  if (random(10) < 0.2) {
    float sz = random(10,15);
    particles.add(new Particle(random(width),0,sz));
  }
  //Atract

  // We must always step through time!
  box2d.step();

  // Make an x,y coordinate out of perlin noise
  float x = noise(xoff)*width;
  float y = noise(yoff)*height;
  xoff += 0.01;
  yoff += 0.01;

  // This is tempting but will not work!
  //box.body.setXForm(box2d.screenToWorld(x,y),0);

  // Instead update the spring which pulls the mouse along
 
 

  // Look at all particles
  for (int i = particles.size()-1; i >= 0; i--) {
    Particle p = particles.get(i);
    p.display();
    // Particles that leave the screen, we delete them
    // (note they have to be deleted from both the box2d world and our list
    if (p.done()) {
      particles.remove(i);
      break;
    }
  }
  
  // Draw the box
  box.display();

  // Draw the spring
  // spring.display();
}


// Collision event functions!
void beginContact(Contact cp) {
  // Get both fixtures
  Fixture f1 = cp.getFixtureA();
  Fixture f2 = cp.getFixtureB();
  // Get both bodies
  Body b1 = f1.getBody();
  Body b2 = f2.getBody();
  // Get our objects that reference these bodies
  Object o1 = b1.getUserData();
  Object o2 = b2.getUserData();

  // If object 1 is a Box, then object 2 must be a particle
  // Note we are ignoring particle on particle collisions
  if (o1.getClass() == Box.class) {
    Particle p = (Particle) o2;
    state = p.change();
    score+=10;
  } 
  // If object 2 is a Box, then object 1 must be a particle
  else if (o2.getClass() == Box.class) {
    Particle p = (Particle) o1;
    state = p.change();
    score+=10;
  }
}


// Objects stop touching each other
void endContact(Contact cp) {
}
